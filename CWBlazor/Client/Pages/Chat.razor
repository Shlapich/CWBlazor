@page "/Chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http.Connections
@using CWBlazor.Shared.Models
@using CWBlazor.Client.Extencions
@using System.Security.Cryptography
@using System.IO
@using System.Text
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IAccountDataProvider DataProvider
@implements IAsyncDisposable
<style>
    /* improved for chat text box */
    textarea {
        border: 1px dashed #888;
        border-radius: 5px;
        width: 80%;
        overflow: auto;
        background: #f7f7f7
    }

    /* improved for speech bubbles */
    .received, .sent {
        position: relative;
        font-family: arial;
        font-size: 1.1em;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .received:after, .sent:after {
        content: '';
        border: 20px solid transparent;
        position: absolute;
        margin-top: -30px;
    }

    .sent {
        background: #03a9f4;
        color: #fff;
        margin-left: 10%;
        top: 50%;
        text-align: right;
    }

    .received {
        background: #4CAF50;
        color: #fff;
        margin-left: 10px;
        margin-right: 10%;
    }

    .sent:after {
        border-left-color: #03a9f4;
        border-right: 0;
        right: -20px;
    }

    .received:after {
        border-right-color: #4CAF50;
        border-left: 0;
        left: -20px;
    }

    /* div within bubble for name */
    .user {
        font-size: 0.8em;
        font-weight: bold;
        color: #000;
    }

    .msg {
        /*display: inline;*/
    }
</style>

<h3>Chat</h3>
<div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@username</b></span>
</div>
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@messageInput"></textarea>
        <a class="text-dark" @onclick="@(() => SendAsync(messageInput))">Send</a>
    </div>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string username;
    private string messageInput;
    private List<Message> _messages = new List<Message>();



    protected override async Task OnInitializedAsync()
    {
        if (!await DataProvider.UpdateToken())
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userInfo = await JsRuntime.GetUserInfoAsync();
        username = userInfo.Email;

        try
        {
            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/socket/chat"), options =>
                {
                    options.AccessTokenProvider = () => DataProvider.GetToken();
                    options.SkipNegotiation = true;
                    options.Transports = HttpTransportType.WebSockets;
                })
                .Build();

            hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await hubConnection.StartAsync();
            await hubConnection.SendAsync("Load");

        }
        catch (Exception e)
        {
            Console.WriteLine($"ERROR: Failed to start chat client: {e.Message}");
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task SendAsync(string message)
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await hubConnection.SendAsync("Broadcast", message);

            messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}