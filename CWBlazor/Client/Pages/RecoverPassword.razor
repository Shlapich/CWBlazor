@page "/recoverPassword"
@using CWBlazor.Client.Extencions
@using CWBlazor.Shared.Contracts.Wrappers
@using CWBlazor.Shared.Models
@layout AuthLayout
@inject IJSRuntime JsRuntime
@inject IAccountDataProvider DataProvider
@inject NavigationManager Navigation

@if(!showSuccessMessage){
<div id="recoverPassword">
    <div class="container">
        <div id="recoverPassword-row" class="row justify-content-center align-items-center">
            <div id="recoverPassword-column" class="col-md-6">
                <div id="recoverPassword-box" class="col-md-12">
                    <EditForm Model="model" OnValidSubmit="OnValid" id="recoverPassword-form" class="form">
                        <h3 class="text-center text-info">Recover password</h3>
                        @if (isError)
                        {
                            <ErrorComponent Error="@error"></ErrorComponent>
                        }
                       <div class="form-group">
                            <InputText @bind-Value="model.Email" class="form-control"></InputText>
                        </div>
                        <div class="form-group">
                            <button class="btn btn-info btn-md w-100" disabled="@isDisabled">submit</button>
                        </div>
                        <div id="register-link" class="row">
                            <a href="register" class="nav-item text-info col-md-6">Register</a>
                            <a href="recoverPassword" class="nav-item text-info col-md-6 ">Forgot password?</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
}
else
{
    <div>
        Check your Email.
        <a href="/" class="nav-item text-info col-md-6">Home</a>
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        if (await JsRuntime.GetUserInfoAsync() != null)
        {
            Navigation.NavigateTo("/");
        }

        await base.OnInitializedAsync();
    }

    private RecoverPasswordRequest model = new RecoverPasswordRequest();
    bool isDisabled = false;
    bool isError = false;
    ErrorResponse error;
    bool showSuccessMessage = false;

    private async Task OnValid()
    {
        isDisabled = true;
        var msg = await DataProvider.RecoverPassword(model);

        if (msg.IsSuccess)
        {
            showSuccessMessage = true;
        }
        else
        {
            error = msg.Error;

            isError = true;
        }

        isDisabled = false;
    }

}